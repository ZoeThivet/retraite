'use strict';

describe('GetUserDataCtrl', function () {
    
    beforeEach(module('SgmapRetraiteExploit'));
    
    var $scope, controller, InfoRetraite, PromptService, $state, $q;
    
    beforeEach(inject(function ($rootScope, $controller, _InfoRetraite_, _PromptService_, _$state_, _$q_) {

        InfoRetraite = _InfoRetraite_;
        PromptService = _PromptService_;
        $state = _$state_;
        $q = _$q_;
        
        $scope = $rootScope.$new();
        controller = $controller('GetUserDataCtrl', {
            $scope: $scope            
        });

    }));
    
    beforeEach(function() {
        spyOn($state, 'go');
        spyOn(PromptService, 'promptInformation');
    });

    it('should have init data in scope', function () {
        expect($scope.data).toEqual(jasmine.any(Object));
    });

    describe('testData', function () {

        beforeEach(function() {
            $scope.data = {
                nom: 'Dupont',
                nir: '999888',
                dateNaissance: '01/01/1900'
            };
        });

        it('should call InfoRetraite and display data if FOUND', function () {

            var result = {
                status: 'FOUND',
                regimes: []
            };

            spyOn(InfoRetraite, 'get').and.callFake(function(name, nir, dateNaissance) {
                return {
                    then: function(onSuccess, onError) {
                        onSuccess(result);
                    }
                };
            });

            $scope.testData();

            expect(InfoRetraite.get).toHaveBeenCalledWith('Dupont', '999888', '01/01/1900');
            expect($state.go).not.toHaveBeenCalled();
            expect(PromptService.promptInformation).not.toHaveBeenCalled();

        });

        it('should call InfoRetraite and prompt message if NOTFOUND', function () {

            var result = {
                status: 'NOTFOUND'
            };

            spyOn(InfoRetraite, 'get').and.callFake(function(name, nir, dateNaissance) {
                return {
                    then: function(onSuccess, onError) {
                        onSuccess(result);
                    }
                };
            });

            $scope.testData();

            expect(InfoRetraite.get).toHaveBeenCalledWith('Dupont', '999888', '01/01/1900');
            expect($state.go).not.toHaveBeenCalled();
            expect(PromptService.promptInformation).toHaveBeenCalledWith("Aucune réponse du serveur avec ces informations ...");

        });

        it('should call InfoRetraite and prompt message if NOTFOUND', function () {

            var result = {
                status: 'ERROR'
            };

            spyOn(InfoRetraite, 'get').and.callFake(function(name, nir, dateNaissance) {
                return {
                    then: function(onSuccess, onError) {
                        onSuccess(result);
                    }
                };
            });

            $scope.testData();

            expect(InfoRetraite.get).toHaveBeenCalledWith('Dupont', '999888', '01/01/1900');
            expect($state.go).not.toHaveBeenCalled();
            expect(PromptService.promptInformation).toHaveBeenCalledWith("Une erreur s'est produite (problème de format de vos données ou erreur interne) ...");

        });

        it('should call InfoRetraite and prompt message if error', function () {

            spyOn(InfoRetraite, 'get').and.callFake(function(name, nir, dateNaissance) {
                return {
                    then: function(onSuccess, onError) {
                        onError({
                            data: "Execution exception ↵RetraiteException occured : ...",
                            status: 500,
                            statusText: "Mon erreur"
                        });
                    }
                };
            });

            $scope.testData();

            expect(InfoRetraite.get).toHaveBeenCalledWith('Dupont', '999888', '01/01/1900');
            expect($state.go).not.toHaveBeenCalled();
            expect(PromptService.promptInformation).toHaveBeenCalledWith("Il y a eu une erreur : ", "Mon erreur");

        });

    });
    
    describe('nextStep', function () {
        
        beforeEach(function() {
            spyOn(InfoRetraite, 'get');
        });

        it('should call InfoRetraite and prompt message if error', function () {

            $scope.nextStep();

            expect($state.go).toHaveBeenCalledWith('step2');
            expect(InfoRetraite.get).not.toHaveBeenCalled();
            expect(PromptService.promptInformation).not.toHaveBeenCalled();

        });
        
    });

});
